#include<ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Servo.h> 
/*
// #include <esp_sleep.h>
*/
#define POT_TEMP A0
#define POT_THREESHOLD A1
#define LED_RED 4
#define LED_GREEN 5
#define SERVO_PIN 2
#define WAKE_BUTTON 7
#define LED_PIN 8
bool led_ctr = true,servo_ctr=true;
String command;

/* WiFi Libraries */ 
void searchNetworkAndConnect();
void listNetworks();
void connectNetwork();

/* MQTT Functions */
void callback(char* topic, byte* payload, unsigned int length);
void reconnect();
void control(String);

/* Variables */
const char* mqtt_server = "broker.emqx.io";
WiFiClient client;
PubSubClient mqtclient(client);
// Servo myServo;

void setup(){
  Serial.begin(9600);
  searchNetworkAndConnect();
  // Configure MQTT broker
  mqtclient.setServer(mqtt_server, 1883);
  mqtclient.setCallback(callback);
  reconnect();

  // pinMode(LED_RED, OUTPUT);
  // pinMode(LED_GREEN, OUTPUT);
  // pinMode(WAKE_BUTTON, INPUT);
  // myServo.attach(SERVO_PIN);
  /*
  // attachInterrupt(digitalPinToInterrupt(WAKE_BUTTON), goToSleep, FALLING);
  // esp_sleep_enable_ext0_wakeup((gpio_num_t)WAKE_BUTTON, LOW);
  //  esp_deep_sleep_start();
  */
  // Serial.println("Enter commands : ");
}

void loop(){
  if (!mqtclient.connected()) {
    reconnect();
    Serial.println("not connected mqtt");
  }
  mqtclient.loop();
  int threeshold = 10; //analogRead(POT_THREESHOLD);
  int temperature = 15;//analogRead(POT_TEMP) * (50.0 / 1023.0);
  String msg = "Temperature: ";
  mqtclient.publish("esp32/servo/out", msg.c_str());
  msg = String(temperature);
  mqtclient.publish("esp32/servo/out", msg.c_str());
  msg = " %";
  
  if (temperature > threeshold) {
    if(led_ctr){
      // digitalWrite(LED_RED, HIGH);
      // digitalWrite(LED_GREEN, LOW);
      msg = "Red Led: on";
      mqtclient.publish("esp32/servo/out", msg.c_str());
      msg = "Green Led: off";
      mqtclient.publish("esp32/servo/out", msg.c_str());
    }else{
      msg = "Green Led: Controlled";
      mqtclient.publish("esp32/servo/out", msg.c_str());

      msg = "Red Led: Controlled";
      mqtclient.publish("esp32/servo/out", msg.c_str());
    }
    if(servo_ctr){
      // myServo.write(90);
      msg = "Fan: on";
      mqtclient.publish("esp32/servo/out", msg.c_str());
    }
    else{
      msg = "Servo: Controlled";
      mqtclient.publish("esp32/servo/out", msg.c_str());

    }
  } else {
    if(led_ctr){
      // digitalWrite(LED_RED, LOW);
      // digitalWrite(LED_GREEN, HIGH);
      msg = "Red Led: off";
      mqtclient.publish("esp32/servo/out", msg.c_str());
      msg = "Green Led: on";
      mqtclient.publish("esp32/servo/out", msg.c_str());
    }else{
      msg = "Green Led: Controlled";
      mqtclient.publish("esp32/servo/out", msg.c_str());

      msg = "Red Led: Controlled";
      mqtclient.publish("esp32/servo/out", msg.c_str());
    }
    if(servo_ctr){
      // myServo.write(0);
      msg = "Fan: off";
      mqtclient.publish("esp32/servo/out", msg.c_str());
    }else{
      msg = "Servo: Controlled";
      mqtclient.publish("esp32/servo/out", msg.c_str());

    }
  }
  
  delay(2000);
}

void reconnect() {
  while (!mqtclient.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (mqtclient.connect("ESP8266_Client")) {
      Serial.println("connected");
      mqtclient.subscribe("esp32/servo/in");
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqtclient.state());
      Serial.println(" retrying in 5 seconds");
      delay(5000);
    }
  }
}

void control(String message){
      if (message.indexOf("LED_ON") != -1) {
          // digitalWrite(LED_RED, HIGH);
          // digitalWrite(LED_GREEN, HIGH);
           Serial.println(message);
          led_ctr = false;
      } else if (message.indexOf("LED_OFF") != -1) {
          // digitalWrite(LED_RED, LOW);
          // digitalWrite(LED_GREEN, LOW);
          led_ctr = false;
      } else if (message.indexOf("SERVO_ON") != -1) {
          // myServo.write(90);
          servo_ctr = false;
      } else if (message.indexOf("LED_OFF") != -1) {
        servo_ctr = false;
          // myServo.write(0);
      }    
      Serial.println(message);
}

void callback(char* topic, byte* payload, unsigned int length) {
  if(String(topic) == "esp32/servo/in"){
    Serial.print("Message received on topic: ");
    Serial.println(topic);
    for (int i = 0; i < length; i++) {
      Serial.print((char)payload[i]);
    }
    control(String((char*)payload));
    Serial.println();
  }
}

/* List the available Networks */
void listNetworks(){
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  Serial.println("search for networks");
  int net_num = WiFi.scanNetworks();
  for(int i=0;i<net_num;i++){
      Serial.print(i+1);
      Serial.print(" : ");
      Serial.print(WiFi.SSID(i));
      Serial.print(" : ");
      Serial.print(WiFi.RSSI(i));
      Serial.print(" : ");
      if (WiFi.encryptionType(i) == AUTH_OPEN){
        Serial.println("Open Network");
      }
      else{
          Serial.println("Has Password");
      }
  }
}

/* connect to a network */
void connectNetwork(String ssid,String password){
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid,password);
  Serial.print("connecting ");
  while(WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nConnected");
  Serial.println(WiFi.RSSI());
  Serial.println(WiFi.localIP());
}

/* Search for the available Networks and connect to one*/
void searchNetworkAndConnect(){
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  Serial.println("search for networks");
  int net_num = WiFi.scanNetworks();
  for(int i=0;i<net_num;i++){
      Serial.print(i+1);
      Serial.print(" : ");
      Serial.print(WiFi.SSID(i));
      Serial.print(" : ");
      Serial.print(WiFi.RSSI(i));
      Serial.print(" : ");
      if (WiFi.encryptionType(i) == AUTH_OPEN){
        Serial.println("Open Network");
      }
      else{
          Serial.println("Has Password");
      }
  }
  Serial.println("Enter the Network SSID");
  while(!Serial.available());
  String ssid = Serial.readString();
  Serial.println("Enter the Network password");
  while(!Serial.available());
  String password = Serial.readString();
  connectNetwork(ssid,password);
}